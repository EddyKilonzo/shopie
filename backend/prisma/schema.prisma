// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  CUSTOMER
}

enum PurchaseStatus {
  PENDING
  CONFIRMED
  SHIPPED
  DELIVERED
  CANCELLED
}

model User {
  id        String      @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  role      Role   @default(CUSTOMER)
  resetToken String?
  resetTokenExpiry DateTime?
  carts     Cart[]
  purchases Purchase[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id        String      @id @default(uuid())
  name      String
  description String
  price     Decimal @default(10.2)
  imageUrl  String
  stockQuantity Int @default(0)
  carts     Cart[]
  purchaseItems PurchaseItem[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Cart {
  id        String      @id @default(uuid())
  quantity  Int       
  productName String
  total     Decimal @default(0)
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  Product   Product  @relation(fields: [productId], references: [id])
  productId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Purchase {
  id        String      @id @default(uuid())
  user      User        @relation(fields: [userId], references: [id])
  userId    String
  status    PurchaseStatus @default(PENDING)
  totalAmount Decimal
  items     PurchaseItem[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PurchaseItem {
  id        String      @id @default(uuid())
  purchase  Purchase    @relation(fields: [purchaseId], references: [id])
  purchaseId String
  product   Product     @relation(fields: [productId], references: [id])
  productId String
  quantity  Int
  price     Decimal
  productName String
  total     Decimal
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
