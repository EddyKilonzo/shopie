### Register a new admin user
POST http://localhost:3000/users
Content-Type: application/json

{
  "name": "Admin User",
  "email": "admin@example.com",
  "password": "admin123",
  "role": "ADMIN"
}

### Register a new regular user
POST http://localhost:3000/users
Content-Type: application/json

{
  "name": "Test User",
  "email": "testuser@example.com",
  "password": "password123"
}

### Login (if you have /auth/login)
POST http://localhost:3000/auth/login
Content-Type: application/json

{
  "email": "testuser@example.com",
  "password": "password123"
}

### Get all users (replace <token> with your JWT)
GET http://localhost:3000/users
Authorization: Bearer <token>

### Get user profile (replace <token> with your JWT)
GET http://localhost:3000/users/profile
Authorization: Bearer <token>

### Get user by id (replace <token> and <id>)
GET http://localhost:3000/users/<id>
Authorization: Bearer <token>

### Update user (replace <token> and <id>)
PUT http://localhost:3000/users/<id>
Authorization: Bearer <token>
Content-Type: application/json

{
  "name": "Updated Name"
}

### Delete user (replace <token> and <id>)
DELETE http://localhost:3000/users/<id>
Authorization: Bearer <token>

### Create Admin User
POST http://localhost:3000/users
Content-Type: application/json

{
  "name": "Super Admin",
  "email": "admin@shopie.com",
  "password": "Admin@123",
  "role": "ADMIN"
}

### Login as Admin
POST http://localhost:3000/auth/login
Content-Type: application/json

{
  "email": "admin@shopie.com",
  "password": "Admin@123"
}

### Get all users (use the token from login response)
GET http://localhost:3000/users
Authorization: Bearer <token>

### Get user profile
GET http://localhost:3000/users/profile
Authorization: Bearer <token>

### Get user by id
GET http://localhost:3000/users/<id>
Authorization: Bearer <token>

### Update user
PUT http://localhost:3000/users/<id>
Authorization: Bearer <token>
Content-Type: application/json

{
  "name": "Updated Name"
}

### Delete user
DELETE http://localhost:3000/users/<id>
Authorization: Bearer <token> 